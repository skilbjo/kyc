// app/controllers/users.js// RESTful API// GET, /users, indexexports.index = function (req, res) {  res.render('index.hbs'); // need to add a view for this; currently this goes to the root view};// GET, /users/news, newexports.new = function (req, res) {  res.render('addinfo.hbs', { message: req.flash('signupMessage') })};// POST, /users, create// exports.create = function (req, res) {  // 	res.redirect('/users/' + req.user._id);// };// GET, /users/:id, showexports.show = function (req, res, models) {  var id = req.params.id;  models.users.find({}, function(err, users) {     res.render('profile', {          user            : req.user,          users           : users     });     });};// GET, users/:id/edit, editexports.edit = function (req, res) {  res.render('edit.hbs', { user : req.params.id });};// PUT, users/:id, updateexports.update = function (req, res, models) {  var id = req.params.id;  models.users.find({ _id : id }, function(err, users) {    if (!users.length) {      res.send('User with an id of ' + id + ' not found.');      return;    };    var user = users[0]; // mongo returns an array of the objects    user.info.firstName     = req.body.firstname;    user.info.lastName      = req.body.lastname;    user.info.mobileNo      = req.body.mobile;    user.info.streetAddress = req.body.street;    user.info.cityAddress   = req.body.city;    user.info.stateAddress  = req.body.state;    user.save();    res.redirect('/users/' + req.user._id);     });};// DELETE, users/:id, destroyexports.destroy = function (req, res, models) {  var id = req.params.id;    models.users.find({}, function(err, user) {      user.remove({ _id : id } );      res.redirect('/?delete=true');     });};// not RESTful API// GET, /users/:id/associate, associateexports.associate = function (req, res, models) {  var id = req.params.id;  models.business.find({}, function(err, businesses) {     res.render('associate.hbs', {          user            : req.user,          businesses      : businesses     });     });};// GET, /users/:id/associate, associateexports.associatePost = function (req, res, models) {  var id        = req.params.id;  var companyId = req.body.id;  // is ok if null?  // if (something) {   // did the user select an existing business? if so, logic here    models.company.find({ _id : companyId }, function(err, company) {      company.user   = user._id; // how to make sure this isn't just      company.save();    });    models.user.find({ _id : id} , function(err, users))    // user.company            = req.body.id;  // };  if (something else) { // did the user create a new business, if so, logic here  // models.business.find({}, function(err, businesses) {  //    res.render('associate.hbs', {  //         user            : req.user,  //         businesses      : businesses  //    });     // });};exports.unlinkLocal = function (req, res) {  var user            = req.user;  user.local.email    = undefined;  user.local.password = undefined;  user.save();  res.redirect('/users/' + req.user._id);};exports.unlinkFacebook = function (req, res) {  var user            = req.user;  user.facebook.token = undefined;  user.save();  res.redirect('/users/' + req.user._id);};exports.unlinkTwitter = function (req, res) {  var user            = req.user;  user.twitter.token = undefined;  user.save();  res.redirect('/users/' + req.user._id);};exports.unlinkGoogle = function (req, res) {  var user            = req.user;  user.google.token = undefined;  user.save();  res.redirect('/users/' + req.user._id);};exports.logout = function (req, res) {  req.logout;  res.redirect('/?logout=true');};// HTTP;  PATH;           METHOD;       DESCRIPTION// GET    /users          index         list all users// GET    /users/new      new           form to create new users// POST   /users          create        process the new user form submission// GET    /users/:id      show          show a user's profile// GET    /users/:id/edit edit          form to edit user's profile// PUT    /users/:id      update        process the user edit form submission// DELETE /users/:id      destroy       deletes a user with :id